package cn.ffcs.txb.app.controller.personal;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.activiti.engine.impl.util.json.JSONArray;
import org.activiti.engine.impl.util.json.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.ffcs.srp.util.i18n.GlobalUtil;
import cn.ffcs.txb.common.model.Constant;
import cn.ffcs.txb.common.util.BaseService;
import cn.ffcs.txb.common.util.DateCommonUtils;
import cn.ffcs.txb.common.util.JsonUtil;
import cn.ffcs.txb.service.personal.IPersonalService;

@Controller
@RequestMapping(value = "/appBrush")
public class AppBrushController {
	@Resource
	private IPersonalService personalService;

	/**
	 * 
	 * 功能描述：刷题筛选
	 * 
	 * @author ：余冬平 创建日期 ：2014年12月24日 上午10:16:59
	 * 
	 * @return
	 * 
	 *         修改历史 ：(修改人，修改时间，修改原因/内容)
	 */
	@RequestMapping(value = "/brushSearch.html")
	public String todayClass(@RequestParam Map<String, Object> reqMap,HttpServletRequest request) {
		String code = reqMap.get("code").toString();
		request.setAttribute("xuekeList", this.personalService.findDictionaryInfoByCode(code,"0"));
		return "brush/search";
	}
	/**
	 * 
	 * 功能描述：题目详情
	 * 
	 * @author ：余冬平 创建日期 ：2014年12月24日 上午10:16:59
	 * 
	 * @return
	 * 
	 *         修改历史 ：(修改人，修改时间，修改原因/内容)
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping(value = "/brushTmDetail.html")
	public String brushExercises(@RequestParam Map<String, Object> reqMap,HttpServletRequest request) throws UnsupportedEncodingException {
		String uuid = reqMap.get("uuid").toString();
		String paperid = reqMap.get("paperid").toString();
	    request.setAttribute("uuid",uuid);
	    request.setAttribute("paperid",paperid);
		return "brush/tmdetail";
	}
	
	/**
	 * 
	 * 功能描述：题目详情
	 * 
	 * @author ：余冬平 创建日期 ：2014年12月24日 上午10:16:59
	 * 
	 * @return
	 * 
	 *         修改历史 ：(修改人，修改时间，修改原因/内容)
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping(value = "/getErrorTopicDetailPage.html")
	public String getErrorTopicDetailPage(@RequestParam Map<String, Object> reqMap,HttpServletRequest request) throws UnsupportedEncodingException {
		String uuid = reqMap.get("id").toString();
		String ids = reqMap.get("ids").toString();
		String courseName = new String(reqMap.get("courseName").toString().getBytes("ISO-8859-1"), "UTF-8");
		request.setAttribute("uuid",uuid);
		request.setAttribute("ids",ids);
	    request.setAttribute("courseName",courseName);
		return "brush/errortmdetail";
	}
	/**
	 * 
	 * 功能描述：错题列表
	 * 
	 * @author ：余冬平 创建日期 ：2014年12月24日 上午10:16:59
	 * 
	 * @return
	 * 
	 *         修改历史 ：(修改人，修改时间，修改原因/内容)
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping(value = "/getErrorTopicList.html")
	public String getErrorTopicList(@RequestParam Map<String, Object> reqMap,HttpServletRequest request) throws UnsupportedEncodingException {
		String courseName = new String(reqMap.get("courseName").toString().getBytes("ISO-8859-1"), "UTF-8");
    	Map<String, Object> userInfo = (Map<String, Object>) request.getSession().getAttribute(Constant.LOGIN_USER_INFO);
    	BigInteger id = (BigInteger)userInfo.get("userId");
    	request.setAttribute("errorList", this.personalService.getErrorTopicList(String.valueOf(id), courseName, "topic_id"));
		return "brush/errorList";
	}
	/**
	 * 
	 * 功能描述：提交题目结果
	 * 
	 * @author ：余冬平 创建日期 ：2014年12月24日 上午10:16:59
	 * 
	 * @return
	 * 
	 *         修改历史 ：(修改人，修改时间，修改原因/内容)
	 */
	@RequestMapping(value = "/submitBrushResult.html")
	@ResponseBody
	public String submitBrushResult(HttpServletRequest request,@RequestParam Map<String, Object> reqMap) {
		Map<String, Object> userInfo =(Map<String, Object>) request.getSession().getAttribute(Constant.LOGIN_USER_INFO);
		//String result = "0";
		try {
			int score = this.personalService.doBrushTopic(userInfo,reqMap);
			userInfo.put("score", score);
			request.getSession().setAttribute(Constant.LOGIN_USER_INFO, userInfo);
			int rigthTotal = this.personalService.findTodayRightTopicCount(userInfo.get("userId").toString(), DateCommonUtils.getTheDate()+" 00:00:00", DateCommonUtils.getTheDate()+" 23:59:59");
			return String.valueOf(rigthTotal);
		} catch (Exception e) {
            e.printStackTrace(); 
            return "error";
		}
	//	return result;
	}
	
    /**
     * 获取科目下的试题
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/getTopicSubjectDetail.html", method = RequestMethod.POST)
    @ResponseBody
    public List<Map<String, Object>> getTopicCategory(HttpServletRequest request,@RequestParam Map<String, Object> reqMap) throws Exception {
    	String subJectId = reqMap.get("subjectId").toString();
        String result  =  BaseService.doGet(GlobalUtil.getValue("topic_get_paperlist")+subJectId+"?offset=0&limit=10");
        JSONObject  json = new JSONObject(result);
        if("ok".equals(json.get("status"))){
        	return JsonUtil.parseToListMap(json.getJSONObject("data").getJSONArray("list"));
        }
        return null;
    }

    @RequestMapping(value = "/getTopicCategory.html", method = RequestMethod.POST)
    @ResponseBody
    public List<Map<String, Object>> getTopicSubjectDetail() throws Exception {
    	String result  =  BaseService.doGet(GlobalUtil.getValue("topic_get_category"));
    	JSONObject  json = new JSONObject(result);
    	if("ok".equals(json.get("status"))){
    		return JsonUtil.parseToListMap(json.getJSONArray("data"));
    	}
    	return null;
    }
    
    @RequestMapping(value = "/getErrorTopicCategory.html", method = RequestMethod.POST)
    @ResponseBody
    public List<Map<String, Object>> getErrorTopicCategory(HttpServletRequest request) throws Exception {
    	BigInteger userId = (BigInteger)((Map<String, Object>)request.getSession().getAttribute(Constant.LOGIN_USER_INFO)).get("userId");
    	return this.personalService.getErrorTopicList(String.valueOf(userId), "course_id");
    }
    
    
    @RequestMapping(value = "/getTopicDetail.html", method = RequestMethod.POST)
    @ResponseBody
    public List<Map<String, Object>> getTopicDetail(HttpServletRequest request,@RequestParam Map<String, Object> reqMap) throws Exception {
		String subjectId = reqMap.get("uuid").toString();
		String paperid = reqMap.get("paperid").toString();
		List<Map<String, Object>> listMap  = new ArrayList<>();
		Map<String, Object> userInfo = (Map<String, Object>)request.getSession().getAttribute(Constant.LOGIN_USER_INFO);
		if(userInfo!=null){
			BigInteger userId = (BigInteger)userInfo.get("userId");
			try {
				listMap =this.personalService.loadTopicList(subjectId,paperid,String.valueOf(userId));
				if(listMap==null){
					return  null;
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return null;
			}
			
		}else{
			try {
				listMap =this.personalService.loadTopicList(subjectId,paperid);
				if(listMap==null){
					return  null;
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return null;
			}
		}
		
        return listMap;
    }
    
    @RequestMapping(value = "/getErrorTopicDetail.html", method = RequestMethod.POST)
    @ResponseBody
    public List<Map<String, Object>> getErrorTopicDetail(HttpServletRequest request,@RequestParam Map<String, Object> reqMap) throws Exception {
    	String subjectId = reqMap.get("uuid").toString();
    	String ids = reqMap.get("ids").toString();
    	List<Map<String, Object>> listMap  = new ArrayList<>();
    	try {
    		listMap =this.personalService.loadErrorTopicList(subjectId);
    		String[] idsArray= ids.split(",");
    		for(String id :idsArray){
    			listMap.addAll(this.personalService.loadErrorTopicList(id));
    		}
    	} catch (Exception e) {
    		// TODO Auto-generated catch block
    		e.printStackTrace();
    		return null;
    	}
    	return listMap;
    }

}
